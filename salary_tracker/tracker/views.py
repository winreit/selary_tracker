from django.shortcuts import render, redirect
from django.contrib.auth.decorators import login_required
from django.contrib import messages
from django.utils import timezone
from django.db.models import Sum, Count
from .models import WorkType, Work, MonthlyTotal
import datetime



# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∏–ø–æ–≤ —Ä–∞–±–æ—Ç
def initialize_work_types():
    TYPES_RABOT = {
        '–¥–æ–ø–ª–∞—Ç–∞': 363,
        '–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞': 94,
        '–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä': 1212,
        '–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–≤–∞—Ä–∫–∞': 1446,
        '–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –¥–æ–ø': 556,
        '–∫—Ä–æ—Å—Å–∏—Ä–æ–≤–∫–∞': 550,
        '–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ': 293,
        '–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –æ–±–ª–∞—Å—Ç—å': 439,
        '–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ç–≤': 176,
        '–¥–æ—Å—Ç–∞–≤–∫–∞ —Å–∏–º–∫–∞—Ä—Ç—ã': 410,
        '–¥–µ–º–æ–Ω—Ç–∞–∂ –æ–Ω—Ç': 105,
        '–¥–µ–º–æ–Ω—Ç–∞–∂ –ø—Ä–æ—á–∏—Ö': 76,
        '–∑–∞–º–µ–Ω–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è': 299,
        '–∫–∞–º–µ—Ä–∞': 158,
        '–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–∞–±–µ–ª—å –ø—Ä–æ–ª–æ–∂–µ–Ω': 492,
        '–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞': 82
    }

    for name, price in TYPES_RABOT.items():
        WorkType.objects.get_or_create(name=name, defaults={'price': price})


# –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
@login_required
def dashboard(request):
    initialize_work_types()

    now = timezone.now()

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
    today_works = Work.objects.filter(
        user=request.user,
        day=now.day,
        month=now.month,
        year=now.year
    )
    today_total = sum(w.work_type.price for w in today_works)

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º–µ—Å—è—Ü
    month_total = Work.objects.filter(
        user=request.user,
        month=now.month,
        year=now.year
    ).aggregate(total=Sum('work_type__price'))['total'] or 0

    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    all_time_total = get_all_time_total(request.user)

    # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Ä–∞–±–æ—Ç
    last_works = Work.objects.filter(user=request.user).order_by('-date')[:5]

    # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π —Å —Ä–∞–±–æ—Ç–∞–º–∏ (—Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ None)
    last_days_query = Work.objects.filter(
        user=request.user,
        day__isnull=False  # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è None
    ).values(
        'day', 'month', 'year'
    ).annotate(
        total=Sum('work_type__price'),
        count=Count('id')
    ).order_by('-year', '-month', '-day')[:7]

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º QuerySet –≤ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∑–Ω–∞—á–µ–Ω–∏–π
    last_days = []
    for day in last_days_query:
        if all(day[key] is not None for key in ['day', 'month', 'year']):
            last_days.append({
                'day': int(day['day']),
                'month': int(day['month']),
                'year': int(day['year']),
                'total': day['total'],
                'count': day['count']
            })

    context = {
        'today_total': today_total,
        'month_total': month_total,
        'all_time_total': all_time_total,
        'last_works': last_works,
        'last_days': last_days,
        'current_date': now.date()
    }
    return render(request, 'tracker/dashboard.html', context)

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –¥–µ–Ω—å
@login_required
def day_stats(request, year=None, month=None, day=None):
    now = timezone.now()
    year = year or now.year
    month = month or now.month
    day = day or now.day

    works = Work.objects.filter(
        user=request.user,
        day=day,
        month=month,
        year=year
    ).select_related('work_type')

    total = sum(w.work_type.price for w in works)

    context = {
        'works': works,
        'total': total,
        'current_date': f"{day}.{month}.{year}",
        'prev_day': get_prev_day(year, month, day),
        'next_day': get_next_day(year, month, day),
    }
    return render(request, 'tracker/day_stats.html', context)


def get_prev_day(year, month, day):
    try:
        date = datetime.date(year, month, day) - datetime.timedelta(days=1)
        return {'year': date.year, 'month': date.month, 'day': date.day}
    except ValueError:
        return None


def get_next_day(year, month, day):
    try:
        date = datetime.date(year, month, day) + datetime.timedelta(days=1)
        return {'year': date.year, 'month': date.month, 'day': date.day}
    except ValueError:
        return None

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã
@login_required
def add_work(request):
    if request.method == 'POST':
        work_type_id = request.POST.get('work_type')
        work_number = request.POST.get('work_number', '').strip()

        if not work_number:
            messages.error(request, '–ù–æ–º–µ—Ä —Ä–∞–±–æ—Ç—ã –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º')
            return redirect('add_work')


        try:
            work_type = WorkType.objects.get(id=work_type_id)

            # –°–æ–∑–¥–∞–µ–º —Ä–∞–±–æ—Ç—É - –º–µ—Ç–æ–¥ save() –º–æ–¥–µ–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç –¥–∞—Ç—É
            Work.objects.create(
                user=request.user,
                work_type=work_type,
                work_number=work_number
            )

            messages.success(request, f'‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {work_number} - {work_type.name} - {work_type.price} —Ä—É–±.')
            return redirect('add_work')

        except WorkType.DoesNotExist:
            messages.error(request, '–í—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–ø —Ä–∞–±–æ—Ç—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
            return redirect('add_work')

    work_types = WorkType.objects.all()
    return render(request, 'tracker/add_work.html', {'work_types': work_types})


# –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ä–∞–±–æ—Ç—ã
@login_required
def delete_last_work(request):
    last_work = Work.objects.filter(user=request.user).order_by('-date').first()

    if last_work:
        work_type_name = last_work.work_type.name
        price = last_work.work_type.price
        last_work.delete()
        messages.warning(request, f'‚ùå –£–¥–∞–ª–µ–Ω–æ: {work_type_name} - {price} —Ä—É–±.')
    else:
        messages.warning(request, '‚ùå –ù–µ—á–µ–≥–æ —É–¥–∞–ª—è—Ç—å')

    return redirect('dashboard')


# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ—Å—è—Ü–∞
@login_required
def save_month(request):
    now = timezone.now()
    works = Work.objects.filter(
        user=request.user,
        month=now.month,
        year=now.year
    )

    total = works.aggregate(total=Sum('work_type__price'))['total'] or 0

    if total > 0:
        MonthlyTotal.objects.create(
            user=request.user,
            month=now.month,
            year=now.year,
            total=total
        )
        works.delete()
        messages.success(request, f'üíæ –ú–µ—Å—è—Ü —Å–æ—Ö—Ä–∞–Ω–µ–Ω! –°—É–º–º–∞: {total} —Ä—É–±.')
    else:
        messages.warning(request, '‚ÑπÔ∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü')

    return redirect('dashboard')


# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º–µ—Å—è—Ü
@login_required
def month_stats(request):
    now = timezone.now()
    month_total = Work.objects.filter(
        user=request.user,
        month=now.month,
        year=now.year
    ).aggregate(total=Sum('work_type__price'))['total'] or 0

    context = {
        'month_total': month_total,
        'current_month': now.month,
        'current_year': now.year,
    }
    return render(request, 'tracker/month_stats.html', context)


# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è
@login_required
def all_time_stats(request):
    all_time_total = get_all_time_total(request.user)
    monthly_totals = MonthlyTotal.objects.filter(user=request.user).order_by('-year', '-month')

    context = {
        'all_time_total': all_time_total,
        'monthly_totals': monthly_totals,
    }
    return render(request, 'tracker/all_time_stats.html', context)


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –æ–±—â–µ–π —Å—É–º–º—ã
def get_all_time_total(user):
    works_total = Work.objects.filter(user=user).aggregate(
        total=Sum('work_type__price')
    )['total'] or 0

    monthly_total = MonthlyTotal.objects.filter(user=user).aggregate(
        total=Sum('total')
    )['total'] or 0

    return works_total + monthly_total

def get_prev_day(year, month, day):
    try:
        date = datetime.date(year, month, day) - datetime.timedelta(days=1)
        return {'year': date.year, 'month': date.month, 'day': date.day}
    except ValueError:
        return None

def get_next_day(year, month, day):
    try:
        date = datetime.date(year, month, day) + datetime.timedelta(days=1)
        return {'year': date.year, 'month': date.month, 'day': date.day}
    except ValueError:
        return None